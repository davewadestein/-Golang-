Golang Fundamentals
"Go is expressive, concise, clean, and efficient"

* Overview

* Introductions

You:

- Who are you?
- What is your job title?
- What do you do here?
- Where are you located?
- What's your programming background?
- Fun fact and/or TV show you are binge watching?

* First Look at Go
.play -numbers -edit src/sieve.go /START OMIT/,/END OMIT/


* History
- Developed at Google (2009)
- Robert Griesemer, Rob Pike, Ken Thompson
- Born out of frustration and shared dislike of C++

* Goals of a Programming Language

- efficient compilation
- efficient execution
- or ease of programming
- ...all three were not available in the same language!

Programmers were choosing ease over safety and efficiency by moving to dynamically typed languages (e.g., Python and JavaScript) rather than C++ or, to a lesser extent, Java

* "Did the C++ committee really believe that was wrong with C++ was that it didn't have enough features?" –Rob Pike

* "Clumsy type systems drive people to dynamically typed languages" -Robert Griesemer

* "Old programs read like quiet conversations between a well-spoken research worker and a well-studied mechanical colleague, not as a debate with a compiler. Who'd have guessed sophistication brought such noise?" -Dick Gabriel

* "The complexity of C++, and the resulting impact on productivity, is no longer justified. All the hoops that the C++ programmer had to jump through in order to use a C-compatible language make no sense anymore–they're just a waste of time and effort. Go makes much more sense for the class of problems that C++ was originally intended to solve." -Bruce Eckel

* Philosophy

A new programming language which addressed common criticisms of other languages
while keeping the good parts...

- static typing
- scalability to large systems (think Java, C++)
- networking and multiprocessing
- not requiring IDEs, but supporting them well

Another goal is...speed!

- should take at most a few seconds to build a large executable
- and coding itself should be speedy


* Philosophy (cont'd)

- Programming = too much bookkeeping, repetition, and clerical work

- The sophistication is worthwhile—no one wants to go back to the old languages—but can it be more quietly achieved?

- Reduce the amount of _typing_ in both senses of the word

- Reduce clutter and complexity

- No forward declarations and no header files–everything is declared exactly once

- Initialization is expressive, automatic, and easy to use

* Sweet Spots

- Anywhere you need speed and scalability

- Back-end (web) development

- Automation

- Command-line tools

- Concurrency

- Systems programming (operating systems, utility software, device drivers, compilers, and linkers)

- What projects/tools do you know of that are written in Go...?

* Written in Golang

- Docker
- Kubernetes
- Terraform
- Netflix
- Dropbox
- SoundCloud
- Uber
- Drone

* Principles

Clean and Simple–Go strives to keep things small and beautiful. You should be able to do a lot in only a few lines of code.

Concurrent–Easy to "fire off" functions to be run as lightweight threads.

Channels–Communication with these goroutines is done, either via shared state or via channels.

Fast–Compilation is fast and execution is fast. The aim is to be as fast as C. Compilation time is measured in seconds.

Safe–Explicit casting and strict rules when converting one type to another. Go has garbage collection. No free()!...the language takes care of it.

Standard format–A Go program can be formatted in (almost) any way the programmers want, but an official format exists. The rule is very simple: The output of the filter gofmt is the officially endorsed format.

*

Postfix types–The type specification is given after the variable name, thus var a int, instead of int a.

UTF-8–UTF-8 is everywhere, in strings and in the program code. Finally you can use Φ=Φ+1 in your source code.

Open Source–The Go license is completely open source.

Fun–Programming with Go should be fun!

* Let's Get...Up and Running

* Installation

1. Download from https://golang.org/dl

2. Installer should put `go` in your `$PATH` (you may need to restart any open Terminal sessions for the change to take effect)

3. Create workspace dir `$HOME/go` (or set `$GOPATH` to use a different location)

4. Create the directory `src/hello` inside your workspace

5. Inside that directory create a file `hello.go` containing the following (OK to copy/paste)

.play src/hello.go

- click the `Run` button above and on any slide which has that button


* Compiling/Running

0. export GO111MODULE=off

1. cd $HOME/go/src/hello

2. go build

- this will create an executable in your directory

3. ./hello

4. go install

- this will install the binary in `$GOPATH/bin` (optional)

- you can also compile and run in one step: go run hello.go

* Compiling/Running/Packaging

Go code (source and compiled) can be found in your GOPATH

- if not set, defaults to ~/go

`src` contains source code
`bin` contains executables
`pkg` contains compiled versions of the available libraries so the compiler can link against them without recompiling them

go tool

- go run will compile and run your code
- go build will produce an executable
- go install will install it in `$GOPATH/bin`

* The Golang Playground

- receives a Go program
- compiles, links, and runs the program inside a sandbox
- some limits on what we can do there: e.g., no keyboard input, random numbers are deterministic, time is constant (i.e., not current)

.link https://play.golang.org/ click here to try it

* Editors

many editors have Golang plugins

- MacVim
- Atom
- Sublime
- Eclipse
- ...remember that Golang's philosophy is that IDEs are not required

* Primitive Types

* Golang Basic Types

*bool* true or false
*string* immutable
*uint* either 32 or 64 bits
*int* same size as uint
*uintptr* an unsigned int large enough to store the uninterpreted bits of a pointer value
*uint8* the set of all unsigned  8-bit integers (0 to 255)
*uint16* the set of all unsigned 16-bit integers (0 to 65535)
*uint32* the set of all unsigned 32-bit integers (0 to 4294967295)
*uint64* the set of all unsigned 64-bit integers (0 to 18446744073709551615)
*int8/int16/32/64* the set of all signed 8-/16-/32-/64-bit integers
*float32/64* the set of all IEEE-754 32-/64-bit floating-point numbers
*complex64/128* set of all complex numbers with float32/64 real and imaginary parts
*byte* alias for uint8
*rune* alias for int32 (represents a Unicode code point)

* Declaring Variables

The `var` statement is used to declare one or more variables

 var (
 	name      string
 	age       int
 	almaMater string
 )

or

 var (
 	name, almaMater string
 	age             int
 )

or individually:

 var name      string
 var age       int
 var almaMater string

* Initializing

all variables initialized to zero unless specified

 var (
 	name      string = "Ranveer Singh"
 	age       int    = 34
 	almaMater string = "Indiana University"
 )

types are inferred if initializers are present

 var (
 	name      = "Ranveer Singh"
 	age       =  34
 	almaMater = "Indiana University"
 )

single line initialization

 var (
 	name, almaMater, age = "Ranveer Singh", "Indiana University", 34
 )
